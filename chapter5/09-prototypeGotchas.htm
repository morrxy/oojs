<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1>some prototype gotchas</h1>

<p>from book Object Oriented Javascript pdf version, page 179</p>

<pre>
function Dog() {
	this.tail = true;
}

var benji = new Dog();
var rusty = new Dog();

Dog.prototype.say = function() {
	return 'Woof!';
}

console.log(benji.say());
console.log(rusty.say());

console.log(benji.constructor);
console.log(rusty.constructor);
console.log(benji.constructor.prototype.constructor);
console.log(typeof benji.constructor.prototype.tail);

// now completely overwrite the prototype object with a brand new object
Dog.prototype = {
	paws: 4,
	hair: true
};
// Dog.prototype.constructor = Dog;

// old objects do not access to the new prototype's properties; they still keep __proto__ pointing to the old prototype object:
console.log('typeof benji.paws');
console.log(typeof benji.paws);
console.log('benji.say()');
console.log(benji.say());
console.log('typeof benji.__proto__.say');
console.log(typeof benji.__proto__.say);
console.log('typeof benji.__proto__.paws');
console.log(typeof benji.__proto__.paws);

// any new object you create from now on will use the updated prototype:
var lucy = new Dog();

// console.log(lucy.say());
console.log('lucy.paws');
console.log(lucy.paws);
console.log('typeof lucy.__proto__.say');
console.log(typeof lucy.__proto__.say);
console.log('typeof lucy.__proto__.paws');
console.log(typeof lucy.__proto__.paws);

// the constructor property of the new objects no longer reports correctly. It should point to Dog(), but instead it points to Object():
console.log('lucy.constructor');
console.log(lucy.constructor);

// the most confusing part is when you look up the prototype of the constructor:
console.log('typeof lucy.constructor.prototype.paws');
console.log(typeof lucy.constructor.prototype.paws);
console.log('typeof benji.constructor.prototype.paws');
console.log(typeof benji.constructor.prototype.paws);

// the following would fixed all of the unexpected behavior described above:
// Dog.prototype = {paws: 4, hair: true};
// Dog.prototype.constructor = Dog;
</pre>

<script type="text/javascript">

function Dog() {
	this.tail = true;
}

var benji = new Dog();
var rusty = new Dog();

Dog.prototype.say = function() {
	return 'Woof!';
}

console.log(benji.say());
console.log(rusty.say());

console.log(benji.constructor);
console.log(rusty.constructor);
console.log(benji.constructor.prototype.constructor);
console.log(typeof benji.constructor.prototype.tail);

// now completely overwrite the prototype object with a brand new object
Dog.prototype = {
	paws: 4,
	hair: true
};
// Dog.prototype.constructor = Dog;

// old objects do not access to the new prototype's properties; they still keep __proto__ pointing to the old prototype object:
console.log('typeof benji.paws');
console.log(typeof benji.paws);
console.log('benji.say()');
console.log(benji.say());
console.log('typeof benji.__proto__.say');
console.log(typeof benji.__proto__.say);
console.log('typeof benji.__proto__.paws');
console.log(typeof benji.__proto__.paws);

// any new object you create from now on will use the updated prototype:
var lucy = new Dog();

// console.log(lucy.say());
console.log('lucy.paws');
console.log(lucy.paws);
console.log('typeof lucy.__proto__.say');
console.log(typeof lucy.__proto__.say);
console.log('typeof lucy.__proto__.paws');
console.log(typeof lucy.__proto__.paws);

// the constructor property of the new objects no longer reports correctly. It should point to Dog(), but instead it points to Object():
console.log('lucy.constructor');
console.log(lucy.constructor);

// the most confusing part is when you look up the prototype of the constructor:
console.log('typeof lucy.constructor.prototype.paws');
console.log(typeof lucy.constructor.prototype.paws);
console.log('typeof benji.constructor.prototype.paws');
console.log(typeof benji.constructor.prototype.paws);

// the following would fixed all of the unexpected behavior described above:
// Dog.prototype = {paws: 4, hair: true};
// Dog.prototype.constructor = Dog;

</script>

</body>
</html>