<!DOCTYPE html>
<html>
<head>
	<title></title>
</head>
<body>

<h1>add constructors for more shapes, Trapezoid</h1>

<p>from book Object Oriented Javascript pdf version, page 221</p>

<pre>

</pre>

<canvas height="600" width="800" id="canvas" />
<script type="text/javascript">

function Point(x, y) {
	this.x = x;
	this.y = y;
}

function Line(p1, p2) {
	this.p1 = p1;
	this.p2 = p2;
	this.length = Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}

function Shape() {
	this.points = [];
	this.lines = [];
	this.init();
}

Shape.prototype = {
	// reset pointer to constructor
	constructor: Shape,
	// initiallization, sets this.context to point
	// to the context of the canvas object
	init: function() {
		if (typeof this.context === 'undefined') {
			var canvas = document.getElementById('canvas');
			Shape.prototype.context = canvas.getContext('2d');
		}
	},
	// method that draws a shape by looping through this.points
	draw: function() {
		var ctx = this.context;
		ctx.strokeStyle = this.getColor();
		ctx.beginPath();
		ctx.moveTo(this.points[0].x, this.points[0].y);
		for (var i = 1; i < this.points.length; i++) {
			ctx.lineTo(this.points[i].x, this.points[i].y);
		}
		ctx.closePath();
		ctx.stroke();
	},
	// method that generaes a random color
	getColor: function() {
		var rgb = [];
		for (var i = 0; i < 3; i++) {
			rgb[i] = Math.round(255 * Math.random());
		}
		return 'rgb(' + rgb.join(',') + ')';
	},
	// method that loops through the points array,
	// creates Line instances and adds them to this.lines
	getLines: function() {
		if (this.lines.length > 0) {
			return this.lines;
		}
		var lines = [];
		for (var i = 0; i < this.points.length; i++) {
			lines[i] = new Line(this.points[i], this.points[i+1] ? this.points[i+1] : this.points[0]);
		}
		this.lines = lines;
		return lines;
	},
	// shell method, to be implemented by children
	getArea: function() {},
	// sums the lengths of all lines
	getPerimeter: function() {
		var lines = this.getLines();
		var perim = 0;
		for (var i = 0; i < lines.length; i++) {
			perim += lines[i].length;
		}
		return perim;
	}
};

function Trapezoid(a, b, height, da, db) {
	this.points = [a, b,
		new Point(b.x + db, b.y + height),
		new Point(a.x - da, a.y + height)
	];
	this.height = height;
	this.topSide = new Line(a, b);
	this.bottomSide = new Line(this.points[2], this.points[3]);
	this.getArea = function() {
		return (this.topSide.length + this.bottomSide.length) * this.height / 2;
	};
}

function Rhombus(pointa, sideLength, degree) {
	var radian = (Math.PI / 180) * degree;
	var dx = pointa.x + sideLength - sideLength * Math.cos(radian);
	var dy = pointa.y + sideLength * Math.sin(radian);
	this.points = [
		pointa,
		new Point(pointa.x + sideLength, pointa.y),
		new Point(pointa.x + sideLength - dx, pointa.y + dy),
		new Point(pointa.x - dx, pointa.y + dy)
	];
	this.getArea = function() {
		var line1 = new Line(this.points[0], this.points[2]);
		var line2 = new Line(this.points[1], this.points[3]);
		return (line1.length * line2.length) / 2;
	};
}

function Triangle(a, b, c) {
	this.points = [a, b, c];
	this.getArea = function() {
		var p = this.getPerimeter();
		var s = p / 2;
		return Math.sqrt(
			s * (s - this.lines[0].length) * (s - this.lines[1].length) * (s - this.lines[2].length)
		);
	};
}

function Rectangle(p, side_a, side_b) {
	this.points = [
		p,
		new Point(p.x + side_a, p.y),          // top right
		new Point(p.x + side_a, p.y + side_b), // bottom right
		new Point(p.x, p.y + side_b)           // bottom left
	];
	this.getArea = function() {
		return  side_a * side_b;
	};
}

function Square(p, side) {
	Rectangle.call(this, p, side, side);
}

(function() {
	var s = new Shape();
	Triangle.prototype = s;
	Rectangle.prototype = s;
	Square.prototype = s;
	Trapezoid.prototype = s;
	Rhombus.prototype = s;
})();

// trapezoid
var tra1 = new Trapezoid(new Point(100, 100), new Point(200, 100), 80, 30, 60);
console.log(tra1.getArea());
console.log(tra1.getPerimeter());
tra1.draw();

// Rhombus
var rhom = new Rhombus(new Point(300, 200), 50, 30);
rhom.draw();
console.log(rhom.getArea());
console.log(rhom.getPerimeter());

</script>

</body>
</html>